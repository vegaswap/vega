diff --git a/contracts-vy/Bucket.vy b/contracts-vy/Bucket.vy
index 436eee3..7119717 100644
--- a/contracts-vy/Bucket.vy
+++ b/contracts-vy/Bucket.vy
@@ -8,11 +8,11 @@
 from vyper.interfaces import ERC20
 
 
-interface XList:
-    def getAddress(i: uint256) -> address:
+interface ClaimList:
+    def addresses(i: uint256) -> address:
         nonpayable
 
-    def getAmount(i: uint256) -> uint256:
+    def amounts(i: uint256) -> uint256:
         nonpayable
 
     def count() -> uint256:
@@ -22,18 +22,17 @@ interface XList:
 # original deployer
 owner: address
 # name of the bucket
-name: String[15]
+name: public(String[15])
 vegaToken: address
-registerTime: uint256
+registerTime: public(uint256)
 days: constant(uint256) = 86400
-default_period: constant(uint256) = 30 * days
+# default_period: constant(uint256) = 30 * days
 period: public(uint256)
 cliffTime: public(uint256)
 duration: public(uint256)
 endTime: public(uint256)
 totalAmount: public(uint256)
 numPeriods: public(uint256)
-amountPerPeriod: public(uint256)
 initialized: public(bool)
 openClaimAmount: public(uint256)
 totalWithdrawnAmount: public(uint256)
@@ -41,10 +40,11 @@ totalClaimAmount: public(uint256)
 claim_addresses: public(address[1000])
 claimCount: public(uint256)
 
+
 struct Claim:
     claimAddress: address
     claimTotalAmount: uint256
-    amountPerPeriod: uint256
+    amountPeriod: uint256
     withdrawnAmount: uint256
     isAdded: bool
 
@@ -87,45 +87,30 @@ def __init__(
     assert _numPeriods < 25, "BUCKET: numPeriods must be smaller than 25"
     self.vegaToken = _vegaToken
     self.name = _name
+    self.initialized = False
     self.registerTime = block.timestamp
+    self.owner = msg.sender
     self.cliffTime = _cliffTime
     self.numPeriods = _numPeriods
     self.totalAmount = _totalAmount
-    self.amountPerPeriod = self.totalAmount / self.numPeriods
     self.totalWithdrawnAmount = 0
     self.totalClaimAmount = 0
-    self.initialized = False
-    self.owner = msg.sender
     self.period = _period
     self.claimCount = 0
 
-
-# div if even otherwise ceil
-@internal
-def ceildiv(a: uint256, m: uint256) -> uint256:
-    t: uint256 = a % m
-    if t == 0:
-        return a / m
-    else:
-        return (a + (m - t)) / m
-
-
 @external
 def initialize():
-    self.duration = self.period * self.ceildiv(self.totalAmount, self.amountPerPeriod)
+    # init the bucket variables
+    assert msg.sender == self.owner, "BUCKET: not the owner"
+    assert not self.initialized
+    amountPerPeriod: uint256 = self.totalAmount / self.numPeriods
+    #duration is example periods given
+    self.duration = self.period * self.numPeriods    
     assert self.duration < 731 * days, "BUCKET: don't vest more than 2 years"
     self.endTime = self.cliffTime + self.duration
     self.initialized = True
 
 
-@internal
-def currentPeriod() -> uint256:
-    timeSinceCliff: uint256 = block.timestamp - self.cliffTime
-    # at cliff, one amount is withdrawable
-    validPeriodCount: uint256 = 1 + timeSinceCliff / default_period
-    return validPeriodCount
-
-
 @external
 def depositOwner(amount: uint256):
     assert msg.sender == self.owner, "BUCKET: not the owner"
@@ -151,18 +136,27 @@ def withdrawOwner(amount: uint256):
     assert transferSuccess, "BUCKET: withdraw failed"
     log WithdrawOwner(msg.sender, amount)
 
+@internal
+def currentPeriod() -> uint256:
+    timeSinceCliff: uint256 = block.timestamp - self.cliffTime
+    # at cliff, one amount is withdrawable
+    validPeriodCount: uint256 = 1 + timeSinceCliff / self.period
+    return validPeriodCount
 
 @internal
 def _getVestableAmount(_claimAddress: address) -> uint256:
+    # get the total amount vestable for the claim at the current time
     claim: Claim = self.claims[_claimAddress]
-
     if block.timestamp < self.cliffTime:
         return 0
 
-    if block.timestamp >= self.endTime:
+    # in the final period the amount to be vested is the total
+    # X | X | rest
+    if block.timestamp >= self.endTime - self.period:
         return claim.claimTotalAmount
 
-    return self.currentPeriod() * claim.amountPerPeriod
+    # default case: amount vested is linear per period
+    return self.currentPeriod() * claim.amountPeriod
 
 
 @external
@@ -172,38 +166,44 @@ def getVestableAmount(_claimAddress: address) -> uint256:
 
 @internal
 def capat(amount: uint256, cap: uint256) -> uint256:
+    # cap an amount at a number 
     if amount > cap:
         return cap
     else:
         return amount
 
+
 @internal
 def _vestClaimMax(_claimAddress: address):
+    #note could pass claim as struct (_claim: Claim)
     assert self.claims[_claimAddress].isAdded, "BUCKET: claim does not exist"
 
-    claim: Claim = self.claims[_claimAddress]
-
     vestableAmount: uint256 = self._getVestableAmount(_claimAddress)
-    vestableAmount = self.capat(vestableAmount, claim.claimTotalAmount)
+    assert vestableAmount <= self.claims[_claimAddress].claimTotalAmount, "BUCKET: claim more than total"
+    vestableAmount = self.capat(vestableAmount, self.claims[_claimAddress].claimTotalAmount)
 
-    withdrawAmount: uint256 = vestableAmount - claim.withdrawnAmount
-    totalAfterwithdraw: uint256 = claim.withdrawnAmount + withdrawAmount
+    assert vestableAmount >= self.claims[_claimAddress].withdrawnAmount, "BUCKET: no vestable amount"
+    
+    wdrawAmount: uint256 = vestableAmount - self.claims[_claimAddress].withdrawnAmount
+    assert wdrawAmount > 0, "BUCKET: no amount claimed"
+    totalAfterwithdraw: uint256 = self.claims[_claimAddress].withdrawnAmount + wdrawAmount
 
     assert (
-        totalAfterwithdraw <= claim.claimTotalAmount
+        totalAfterwithdraw <= self.claims[_claimAddress].claimTotalAmount
     ), "BUCKET: can not withdraw more than total"
 
-    assert withdrawAmount > 0, "BUCKET: no amount claimed"
-
+    
     assert ERC20(self.vegaToken).transfer(
-        _claimAddress, withdrawAmount
+        _claimAddress, wdrawAmount
     ), "BUCKET: transfer failed"
 
-    log WithdrawClaim(claim.claimAddress, withdrawAmount)
+    assert self.openClaimAmount - wdrawAmount >= 0 , "BUCKET: no amount left to claim"
+
+    self.claims[_claimAddress].withdrawnAmount += wdrawAmount
+    log WithdrawClaim(self.claims[_claimAddress].claimAddress, wdrawAmount)
+    self.totalWithdrawnAmount += wdrawAmount
+    self.openClaimAmount -= wdrawAmount
 
-    claim.withdrawnAmount += withdrawAmount
-    self.totalWithdrawnAmount += withdrawAmount
-    self.openClaimAmount -= withdrawAmount
 
 @external
 def vestClaimMax(_claimAddress: address):
@@ -229,21 +229,21 @@ def _addClaim(_claimAddress: address, _claimTotalAmount: uint256):
         _claimTotalAmount <= unclaimed
     ), "BUCKET: can not claim tokens that are not deposited"
 
-    _amountPerPeriod: uint256 = _claimTotalAmount / self.numPeriods
+    _amountPeriod: uint256 = _claimTotalAmount / self.numPeriods
     existclaim: Claim = self.claims[_claimAddress]
     assert existclaim == empty(Claim), "BUCKET: claim at this address already exists"
     self.claims[_claimAddress] = Claim(
         {
             claimAddress: _claimAddress,
-            amountPerPeriod: _amountPerPeriod,
+            amountPeriod: _amountPeriod,
             claimTotalAmount: _claimTotalAmount,
             withdrawnAmount: 0,
             isAdded: True,
         }
     )
 
-    self.claimCount += 1
     self.claim_addresses[self.claimCount] = _claimAddress
+    self.claimCount += 1
 
     self.totalClaimAmount += _claimTotalAmount
     self.openClaimAmount += _claimTotalAmount
@@ -271,8 +271,8 @@ def vestAll():
 @external
 def addClaimsBatch(list_addr: address):
     for i in range(0, 1000):
-        amount: uint256 = XList(list_addr).getAmount(i)
+        amount: uint256 = ClaimList(list_addr).amounts(i)
         if amount > 0:
-            self._addClaim(XList(list_addr).getAddress(i), amount)
+            self._addClaim(ClaimList(list_addr).addresses(i), amount)
         else:
             return
